## DBSCAN Algorithmus
# Die Parameter eps und k können je nach Daten varriieren
library(dbscan)

# Ohne vorherige PCA der Daten
daten_norm <- as.matrix(daten_norm)

# Optimalen Wert für eps finden
start.time <- Sys.time()
kNNdistplot(daten_norm, k = 9)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken

# Ausführung des DBSCAN Clusterings
start.time <- Sys.time()
set.seed(2)
db <- dbscan(daten_norm, eps = 0.05, minPts = 6)
db
hullplot(daten_norm, db)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken

# Ausgabe der Noise Points
print(daten[!db$cluster,])

# True positive
TP <- subset(daten[!db$cluster,], dataset.Label == 1)
nrow(TP)

# False positive
FP <- subset(daten[!db$cluster,], dataset.Label == 0)
nrow(FP)

#================================================================================

# Mit vorheriger PCA der Daten
PCA_Components_Stamps <- as.matrix(PCA_Components_Stamps)

# Optimalen Wert für eps finden
start.time <- Sys.time()
kNNdistplot(PCA_Components_Stamps, k = 6)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken

# Ausführung des DBSCAN Clusterings
start.time <- Sys.time()
set.seed(2)
db <- dbscan(PCA_Components_Stamps, eps = 0.05, minPts = 6)
db
hullplot(PCA_Components_Stamps, db)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken

# Ausgabe der Noise Points
print(daten[!db$cluster,])

# True positive
TP <- subset(daten[!db$cluster,], dataset.Label == 1)
nrow(TP)

# False positive
FP <- subset(daten[!db$cluster,], dataset.Label == 0)
nrow(FP)
